db = database
fs = filesystem

NB: lang's tag id resolving always resolves the first one in the database (as provided by SQLAlchemy)
    -- does not check for nor care about TagDef s which have non-unique names -- this should be enforced elsewhere
    NB: this can't be handled by a UNIQUE constraint on TagDefs.name, because names should only be Unique within libraries

NB: do we really need Item.library_id ?
    Consider: dump of files on file system, then these assigned to libraries via TagAsses
    TagDef needs library_id because different possible tags for each library

NB: remove Item.library_id because ^
    remove Item.timestamp and Item.file_timestamp so as to favour creating a default TagDef for them
    and also system-generated TagAsses on import (better because can modularise more: e.g: file_importer module can assign file_timestamp but perhaps social media importer wouldn't be able to access this info, so won't)
    Added TagDef.source to facilitate with this
    NB: maybe naming system like TagDef.source = "SYSTEM:file_importer", "USER", "MODULE:social_plugin", etc <-- solidify later

NB: reinstated Item.library_id but removed TagAss.library_id.
    Previously, it would require for a Item to have at least one TagAss to be in a certain library. However, an Item
    should have the intrinsic property of existing in a library

maybe allow 'reference to another Item' as an acceptable datatype
so users can set up prequel: <ref to another item>, sequel, etc (insp: MyAnimeList)

Need some way to store thumbnail data as well

think about file-system no name collision method?
-> or just store blobs in database (probably not though because blobs in db kinda bad)

maybe call plugins "processes"
Thumbnails should expire over time / regen as required to save space
-> new Thumbnail table

reminder: going to use zip file for actually storing files on disk

more terminology ideas: "processes", "taggers", "importers"

reminder: importer flushes+commits to db and all (required to get Item id so that asses can be made)
but the window that pops up to edit the tags EDIT (UPDATE queries)
=> good because can reuse this ui component later too

TODO: no need to pass session to stuff (to lang.py) if global session in database.py

considering replacing current library implementation (library_id) with simple (user-defined) media: music/photos/wallpapers/whatever tag
or perhaps even library: music/photos/wallpapers etc tag
Why:
    removing library_id would simplify name collision matching
    more importantly:
        If an `Item` is to be instantiated upon importation of a file, library_id must be provided at import-time (or set as NULL)
        the `Item` object must be flushed to db in order for it to have an item id -- necessary to assign tags to the Item
        therefore, if the user wishes to change the target library for the Item with the tagging dialog, the db will need to be rolled back and so on
        Anyway its just messy
    organisation/UX:
        Consider: using a social media importer -- however that social media contains content from multiple domains (libraries)
        e.g: has photos, but also music (quite common).
        Seems clumsy to move items from the same source into a different library in the above scheme
        especially considering the fact that TagDefs common to that social media would need to be recreated in all the libraries
    idk if the above made sense (i'm sleepy) and there are probably other examples that can be given but anyway at the end of the day,
    it's just a bit clumsy in comparison to using a TagDef 'library' instead.
    Note: TagDef 'library' system seems more in-line with the philosophy of the rest of the system (think: timestamp field was removed in favour of 'timestamp' TagDef)
NB: TagDef will probably be called 'media' not 'library' now (name sounds clearer)

removed Item.source
    -> will always be 'file' because other importers should download files first to the import folder
    and let the FileImporter manage Item instantiation and etc
    tag stuff, however, should be done by the importers differently

remove TagDef.id and replace with TagDef.name as primary key -> simplifies a bunch of stuff
    notably: don't need to poll database for id from name -> can just directly use name